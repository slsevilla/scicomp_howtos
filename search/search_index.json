{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Background","text":"<p>Training location for the SCICOMP Team</p>"},{"location":"user-guide/ci/","title":"5. Use CI","text":"<p>TESTING RUN INFO</p>"},{"location":"user-guide/contributions/","title":"Contributions","text":"<p>SCICOMP CONTRIBUTED TO THIS TRAINING - Samantha Sevilla Chill</p>"},{"location":"user-guide/feature-branch/","title":"Feature Branch","text":""},{"location":"user-guide/feature-branch/#best-practices","title":"Best practices","text":"<p>Each repository must have the following two branches at any time, with additional branches created to address <code>features</code> or <code>fixes</code> </p> <ul> <li> <p>\u2018main\u2019 (titled \u2018main\u2019 or \u2018master\u2019) </p> </li> <li> <p>\u2018dev\u2019 (titled \u2018dev\u2019 or \u2018develop\u2019)</p> </li> </ul> <p>New branches should adopt the style of <code>feature/&lt;feature_name&gt;</code> or <code>fix/&lt;patch_description&gt;</code></p> <p>A new, descriptive branch is created for each new feature or fix using <code>git checkout -b &lt;branch name&gt;</code> </p> <p>Branch source will vary depending on need (i.e.,IE main, dev, feature, or fix) </p> <p>Ideally, each would be linked to an issue, which would be included, such as: <code>feature/issue79_add_ivar_trim</code> or <code>fix/issue80_primer_error</code> </p> <p>Changes to feature/ and fix/ branches are merged into <code>dev</code> branch, following Pull Request (PR) SOP. </p> <p>Upon merging, feature/ or fix/ branch is deleted. </p>"},{"location":"user-guide/feature-branch/#tutorial","title":"Tutorial","text":""},{"location":"user-guide/feature-branch/#create-the-dev-branch","title":"Create the dev branch","text":"<ol> <li> <p>Check what branches are available <pre><code>git branch -a\n</code></pre></p> </li> <li> <p>Create a new branch called dev; verify the branch exists <pre><code>git checkout -b dev\ngit branch -a\n</code></pre></p> </li> <li> <p>Push this new branch to your repo <pre><code>git push origin dev\n</code></pre></p> </li> <li> <p>Go to your github page and refresh - you should see there is a new branch listed under the dropdown [main is listed as default]</p> </li> </ol>"},{"location":"user-guide/feature-branch/#create-a-feature-branch","title":"Create a feature branch","text":"<ol> <li> <p>Return to your git terminal and ensure that you are on the dev branch <pre><code>git branch -a\n</code></pre></p> </li> <li> <p>Create a feature branch based on the dev branch <pre><code>git checkout -b feature/update_contributions\n</code></pre></p> </li> <li> <p>Edit the contributions page <pre><code>vim docs/user-guide/contributions.md\n\ngit add docs/user-guide/contributions.md\n\ngit commit -m \"docs: added contributions\"\n\ngit push origin feature/update_contributions\n</code></pre></p> </li> </ol>"},{"location":"user-guide/getting-started/","title":"Overview","text":"<p>This repo is meant for trainings and how-to's for the OAMD SciComp team.</p>"},{"location":"user-guide/getting-started/#tutorials","title":"Tutorials","text":""},{"location":"user-guide/getting-started/#creating-feature-branches-to-handle-issues","title":"Creating feature branches to handle issues","text":"<ol> <li>Prepare the Repo</li> <li>Create an Issue </li> <li>Creating a Feature Branch</li> <li>Create a Pull Request</li> </ol>"},{"location":"user-guide/issues/","title":"Issues","text":""},{"location":"user-guide/issues/#best-practices","title":"Best Practices","text":"<ol> <li>Ensure that issue tracking is turned on (Settings &gt; Features &gt; Issues) </li> <li>Create a new issue for each distinct fix, feature request, or benchmarking task. </li> <li>Include a descriptive title that summarizes the issue. </li> <li>Utilize the Issue template for all issues (Settings &gt; Features &gt; Issues &gt; Set Up Templates). </li> <li>Categorize the issue with an appropriate label, using the table below. </li> <li>Assign the issue to a team member or leave it unassigned for general attention. </li> </ol>"},{"location":"user-guide/issues/#tutorial","title":"Tutorial","text":"<ol> <li>Go to your github page and select Issues</li> <li>Create an issue selecting <code>New Issue</code></li> <li> <p>Add a descriptive information</p> <ul> <li>Update contributions</li> <li>Add user  to the contributions list <li>Assign to yourself</li> <li>Add label for <code>documentation</code></li> <li>Submit the new issue</li>"},{"location":"user-guide/prepare-repo/","title":"Prepare the repository","text":""},{"location":"user-guide/prepare-repo/#best-practices","title":"Best Practices","text":"<p>TODO</p>"},{"location":"user-guide/prepare-repo/#tutorial","title":"Tutorial","text":"<ol> <li> <p>Go to the github repo https://github.com/slsevilla/scicomp_howtos</p> </li> <li> <p>Fork the repo to your personal workspace. Rename the repo with your last name.</p> </li> <li> <p>Go to <code> on your forked repo and copy the HTTPS path <li> <p>On your Git terminal clone the repo <pre><code>cd &lt;path to place repo&gt;\ngit clone &lt;paste path&gt;\ncd &lt;name of repo&gt;\n</code></pre></p> </li>"},{"location":"user-guide/pull-request/","title":"Pull Requests","text":""},{"location":"user-guide/pull-request/#best-practices","title":"Best Practices","text":"<p>PR should be created after the first commit from the feature/ or fix/ branch. </p> <p>Include a descriptive title, summarizing the components included in the PR. </p> <p>The PR template included below, should be included for each PR. </p> <p>PRs may be created in draft or review mode. </p> <p>Drafts can only be edited by the individual who created them. </p> <p>For collaborative branches, review-mode PR\u2019s may be used. </p> <p>Upon completion of the PR template and testing, a userd that is not the PR requestor should be assigned as a reviewer, that is not the PR requestor. </p> <p>After a review, address any concerns, updating the PR as needed. </p> <p>Complete the Code Review cycle until approval is achieved from the reviewer. </p> <p>Upon approval from the reviewer, push the branch into dev or main under the following conditions: </p> <p>Main: Any break-fixing patch updates </p> <p>Dev: All other updates </p> <p>Ensure the feature or fix branch has been deleted. </p>"},{"location":"user-guide/pull-request/#tutorial","title":"Tutorial","text":""},{"location":"user-guide/pull-request/#create-the-pr","title":"Create the PR","text":"<ol> <li> <p>Go to your Github page and select <code>Pull Request</code> &gt; <code>New pull request</code></p> </li> <li> <p>Merge your <code>feature/update_contributions</code> branch into <code>dev</code>, then <code>create pull request</code></p> </li> <li> <p>Copy the template into your pull request <pre><code># Changes \n\n**This PR includes the following changes:** \n\n```list of changes, for example: \n- feat: Added processing of Ion-torrent Bams and ONT long reads \n- feat: Added Nanoplot as Quality metrics tool for ONT long reads \n- feat: Samtools ampliconclip is used as primary trimming tool for ONT-long reads. \n- fix: removed ivar trim which was erroring for ONT-long reads```\n\n# Issues \n**This PR addresses the following issues:** \n```list of issues, for example: - fixes #17```\n\n# Scope \n**Limitations:** \n```for example, only tested on HPC cluster Rosalind```\n\n# Checklist \nThe following points were addressed in this PR: \n- [ ] Description of the changes with justifications and issue links, where applicable \n- [ ] Updated docs related to these changes \n- [ ] Updated `CHANGE.md` with changes outlined above and a reference to the PR number.\n</code></pre></p> </li> <li>Update the information above, including your previous issue.</li> </ol> <p>NOTE: Notice that there are rules and CI available! All PR's should have a reviewer in real-work.</p> <ol> <li>Merge pull request and confirm. Delete branch.</li> </ol>"}]}